/******************************************************************
* Description
*	This is the top-level of a MIPS processor
* This processor is written Verilog-HDL. Also, it is synthesizable into hardware.
* Parameter MEMORY_DEPTH configures the program memory to allocate the program to
* be execute. If the size of the program changes, thus, MEMORY_DEPTH must change.
* This processor was made for computer organization class at ITESO.
******************************************************************/


module MIPS_Processor
#(
	parameter MEMORY_DEPTH = 32
)

(
	// Inputs
	input clk,
	input reset,
	input [7:0] PortIn,
	// Output
	output [31:0] ALUResultOut,
	output [31:0] PortOut
);
//******************************************************************/
//******************************************************************/
assign  PortOut = 0;

//******************************************************************/
//******************************************************************/
// Data types to connect modules
wire BranchNE_wire;
wire BranchEQ_wire;
wire RegDst_wire;
wire NotZeroANDBrachNE;
wire ZeroANDBrachEQ;
wire ORForBranch;
wire ALUSrc_wire;
wire RegWrite_wire;
wire MemWrite_wire;
wire MemRead_wire;
wire Zero_wire;
wire ZeroEQ;
wire ZeroNE;
wire OR_C;
wire JumpSelector;
wire JR_wire;
wire MemtoReg_wire;
wire Jal_wire;
wire [2:0] ALUOp_wire;
wire [3:0] ALUOperation_wire;
wire [4:0] WriteRegister_wire;
wire [31:0] MUX_PC_wire;
wire [31:0] PC_wire;
wire [31:0] Instruction_wire;
wire [31:0] ReadData1_wire;
wire [31:0] ReadData2_wire;
wire [31:0] InmmediateExtend_wire;
wire [31:0] ReadData2OrInmmediate_wire;
wire [31:0] ALUResult_wire;
wire [31:0] ALUResult_wire_AFTER_MUX;
wire [31:0] PC_4_wire;
wire [31:0] Jump_Address_MUX_wire;
wire [31:0] Shift_To_Adder_wire;
wire [31:0] Adder_To_MUX_wire;
wire [31:0] Jump_MUX_To_MUX_wire;
wire [31:0] MUX_To_JR_MUX;
wire [31:0] MUX_To_PC;
wire [31:0] InmmediateExtendAnded_wire;
wire [31:0] PCtoBranch_wire;
wire [31:0] RAM_Out;
wire [31:0] RamMuxToRegMux;

integer ALUStatus;


//******************************************************************/
//******************************************************************/
//******************************************************************/
//******************************************************************/
//******************************************************************/

DataMemory RAM
(
.clk(clk),
.Address(), // TO DO FROM RAM DECODER
.WriteData(ReadData2_wire),
.MemWrite(MemWrite_wire),
.MemRead(MemRead_wire),
.ReadData(RAM_Out)
);

Multiplexer2to1
#(
	.NBits(5)
)
MUX_RAM_ALU
(
	.Selector(MemtoReg_wire),
	.MUX_Data0(RAM_Out),
	.MUX_Data1(ALUResult_wire),
	
	.MUX_Output(RamMuxToRegMux)

);

Multiplexer2to1
#(
	.NBits(5)
)
MUX_IntoReg
(
	.Selector(Jal_wire),
	.MUX_Data0(PC_4_wire),
	.MUX_Data1(RamMuxToRegMux),
	
	.MUX_Output(ALUResult_wire_AFTER_MUX)

);

Control
ControlUnit
(
	.Instruction(Instruction_wire[5:0]),
	.OP(Instruction_wire[31:26]),
	.RegDst(RegDst_wire),
	.BranchNE(BranchNE_wire),
	.BranchEQ(BranchEQ_wire),
	.ALUOp(ALUOp_wire),
	.ALUSrc(ALUSrc_wire),
	.RegWrite(RegWrite_wire),
	.MemWrite(MemWrite_wire),
	.MemRead(MemRead_wire),
	.MemtoReg(MemtoReg_wire),
	.Jump(JumpSelector),
	.Jal(Jal_wire)
);


PC_Register
#(
	.N(32)
)
(
	.clk(clk),
	.reset(reset),
	.NewPC(MUX_To_PC), ///Auqi va la salida del mux de jr
	
	
	.PCValue(PC_wire) //Address
);





OR_Gate ORGate
(
.inEQ(zeroEQ),
.inNE(ZeroNE),
.orGateOut(OR_C)
);


ProgramMemory
#(
	.MEMORY_DEPTH(MEMORY_DEPTH)
)
ROMProgramMemory
(
	.Address(PC_wire),
	.Instruction(Instruction_wire)
);

Adder32bits //Adder 1
PC_Puls_4
(
	.Data0(PC_wire),
	.Data1(4),
	
	.Result(PC_4_wire)
);

Adder32bits //Adder 2
Add_Shift_2
(
	.Data0(PC_4_wire),
	.Data1(Shift_To_Adder_wire),
	
	.Result(Adder_To_MUX_wire)
);



ShiftLeft2
SHIFT_L2
(
	.DataInput(Instruction_wire[25:0]),
	.DataOutput(Jump_Address_MUX_wire) //Este va para el mux de jump

);

ShiftLeft2
SHIFT_L2_Sing_Extend
(
	.DataInput(InmmediateExtend_wire),
	.DataOutput(Shift_To_Adder_wire) //Este va par el adder 2

);

////*********MUX para JUMP*******************/
Multiplexer2to1
#(
	.NBits(5)
)
Jump_MUX_1
(
	.Selector(OR_C), //Alu Zero
	.MUX_Data0(PC_4_wire),
	.MUX_Data1(Adder_To_MUX_wire),
	
	.MUX_Output(Jump_MUX_To_MUX_wire)

);

Multiplexer2to1
#(
	.NBits(5)
)
Jump_MUX_2
(
	.Selector(JumpSelector), //Jump enable de control, tenemos que declararlo en Contro;
	.MUX_Data0(Jump_Address_MUX_wire),
	.MUX_Data1(Jump_MUX_To_MUX_wire),
	
	.MUX_Output(MUX_To_JR_MUX)

);



//*******************************JR MUX*****************************/
Multiplexer2to1

#(
	.NBits(5)
)
JumpReg_MUX
(
	.Selector(JR_wire), //JR enable en Alu control
	.MUX_Data0(ReadData1_wire), //Read Data 1
	.MUX_Data1(MUX_To_JR_MUX), //Mux Jump 2
	
	.MUX_Output(MUX_To_PC) //PC new_PC

);


//******************************************************************/
//******************************************************************/
//******************************************************************/
//******************************************************************/
//******************************************************************/
Multiplexer2to1
#(
	.NBits(5)
)
MUX_ForRTypeAndIType
(
	.Selector(RegDst_wire),
	.MUX_Data0(Instruction_wire[20:16]),
	.MUX_Data1(Instruction_wire[15:11]),
	
	.MUX_Output(WriteRegister_wire)

);



RegisterFile
Register_File
(
	.clk(clk),
	.reset(reset),
	.RegWrite(RegWrite_wire),
	.WriteRegister(WriteRegister_wire),
	.ReadRegister1(Instruction_wire[25:21]),
	.ReadRegister2(Instruction_wire[20:16]),
	.WriteData(ALUResult_wire_AFTER_MUX),
	.ReadData1(ReadData1_wire),
	.ReadData2(ReadData2_wire)

);

SignExtend
SignExtendForConstants
(   
	.DataInput(Instruction_wire[15:0]),
   .SignExtendOutput(InmmediateExtend_wire)
);



Multiplexer2to1
#(
	.NBits(32)
)
MUX_ForReadDataAndInmediate
(
	.Selector(ALUSrc_wire),
	.MUX_Data0(ReadData2_wire),
	.MUX_Data1(InmmediateExtend_wire),
	
	.MUX_Output(ReadData2OrInmmediate_wire)

);


ALUControl
ArithmeticLogicUnitControl
(
	.ALUOp(ALUOp_wire),
	.ALUFunction(Instruction_wire[5:0]),
	.ALUOperation(ALUOperation_wire),
	.JR_Selector(JR_wire)

);



ALU
Arithmetic_Logic_Unit 
(
	.ALUOperation(ALUOperation_wire),
	.A(ReadData1_wire),
	.B(ReadData2OrInmmediate_wire),
	.Zero(Zero_wire),
	.ALUResult(ALUResult_wire)
);

assign ALUResultOut = ALUResult_wire;
assign ZeroEQ = Zero_wire & BranchEQ_wire;
assign ZeroNE = (-Zero_wire) & BranchNE_wire;


endmodule
